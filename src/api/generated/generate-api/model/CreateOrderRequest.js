/**
 * SWD_392 Auction API
 * API documentation of SWD_392 Auction v1.0.0
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateOrderItemRequest from './CreateOrderItemRequest';

/**
 * The CreateOrderRequest model module.
 * @module model/CreateOrderRequest
 * @version 1.0.0
 */
class CreateOrderRequest {
    /**
     * Constructs a new <code>CreateOrderRequest</code>.
     * @alias module:model/CreateOrderRequest
     * @param userAddressId {Number} 
     * @param paymentMethod {module:model/CreateOrderRequest.PaymentMethodEnum} 
     */
    constructor(userAddressId, paymentMethod) { 
        
        CreateOrderRequest.initialize(this, userAddressId, paymentMethod);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userAddressId, paymentMethod) { 
        obj['userAddressId'] = userAddressId;
        obj['paymentMethod'] = paymentMethod;
    }

    /**
     * Constructs a <code>CreateOrderRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateOrderRequest} obj Optional instance to populate.
     * @return {module:model/CreateOrderRequest} The populated <code>CreateOrderRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateOrderRequest();

            if (data.hasOwnProperty('userAddressId')) {
                obj['userAddressId'] = ApiClient.convertToType(data['userAddressId'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], 'String');
            }
            if (data.hasOwnProperty('orderItems')) {
                obj['orderItems'] = ApiClient.convertToType(data['orderItems'], [CreateOrderItemRequest]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateOrderRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateOrderRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateOrderRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['paymentMethod'] && !(typeof data['paymentMethod'] === 'string' || data['paymentMethod'] instanceof String)) {
            throw new Error("Expected the field `paymentMethod` to be a primitive type in the JSON string but got " + data['paymentMethod']);
        }
        if (data['orderItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orderItems'])) {
                throw new Error("Expected the field `orderItems` to be an array in the JSON data but got " + data['orderItems']);
            }
            // validate the optional field `orderItems` (array)
            for (const item of data['orderItems']) {
                CreateOrderItemRequest.validateJSON(item);
            };
        }

        return true;
    }


}

CreateOrderRequest.RequiredProperties = ["userAddressId", "paymentMethod"];

/**
 * @member {Number} userAddressId
 */
CreateOrderRequest.prototype['userAddressId'] = undefined;

/**
 * @member {String} description
 */
CreateOrderRequest.prototype['description'] = undefined;

/**
 * @member {module:model/CreateOrderRequest.PaymentMethodEnum} paymentMethod
 */
CreateOrderRequest.prototype['paymentMethod'] = undefined;

/**
 * @member {Array.<module:model/CreateOrderItemRequest>} orderItems
 */
CreateOrderRequest.prototype['orderItems'] = undefined;





/**
 * Allowed values for the <code>paymentMethod</code> property.
 * @enum {String}
 * @readonly
 */
CreateOrderRequest['PaymentMethodEnum'] = {

    /**
     * value: "CARD"
     * @const
     */
    "CARD": "CARD",

    /**
     * value: "COD"
     * @const
     */
    "COD": "COD",

    /**
     * value: "E_WALLET_PAYPAL"
     * @const
     */
    "E_WALLET_PAYPAL": "E_WALLET_PAYPAL",

    /**
     * value: "E_WALLET_VNPAY"
     * @const
     */
    "E_WALLET_VNPAY": "E_WALLET_VNPAY"
};



export default CreateOrderRequest;

