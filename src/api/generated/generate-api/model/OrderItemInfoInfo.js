/**
 * SWD_392 Auction API
 * API documentation of SWD_392 Auction v1.0.0
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderExtraVariantInfo from './OrderExtraVariantInfo';

/**
 * The OrderItemInfoInfo model module.
 * @module model/OrderItemInfoInfo
 * @version 1.0.0
 */
class OrderItemInfoInfo {
    /**
     * Constructs a new <code>OrderItemInfoInfo</code>.
     * @alias module:model/OrderItemInfoInfo
     */
    constructor() { 
        
        OrderItemInfoInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderItemInfoInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderItemInfoInfo} obj Optional instance to populate.
     * @return {module:model/OrderItemInfoInfo} The populated <code>OrderItemInfoInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderItemInfoInfo();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('productName')) {
                obj['productName'] = ApiClient.convertToType(data['productName'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('extraVariants')) {
                obj['extraVariants'] = ApiClient.convertToType(data['extraVariants'], [OrderExtraVariantInfo]);
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderItemInfoInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderItemInfoInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['productName'] && !(typeof data['productName'] === 'string' || data['productName'] instanceof String)) {
            throw new Error("Expected the field `productName` to be a primitive type in the JSON string but got " + data['productName']);
        }
        if (data['extraVariants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['extraVariants'])) {
                throw new Error("Expected the field `extraVariants` to be an array in the JSON data but got " + data['extraVariants']);
            }
            // validate the optional field `extraVariants` (array)
            for (const item of data['extraVariants']) {
                OrderExtraVariantInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
OrderItemInfoInfo.prototype['id'] = undefined;

/**
 * @member {String} productName
 */
OrderItemInfoInfo.prototype['productName'] = undefined;

/**
 * @member {Number} price
 */
OrderItemInfoInfo.prototype['price'] = undefined;

/**
 * @member {Number} discount
 */
OrderItemInfoInfo.prototype['discount'] = undefined;

/**
 * @member {Number} quantity
 */
OrderItemInfoInfo.prototype['quantity'] = undefined;

/**
 * @member {Array.<module:model/OrderExtraVariantInfo>} extraVariants
 */
OrderItemInfoInfo.prototype['extraVariants'] = undefined;

/**
 * @member {String} note
 */
OrderItemInfoInfo.prototype['note'] = undefined;

/**
 * @member {Number} productId
 */
OrderItemInfoInfo.prototype['productId'] = undefined;






export default OrderItemInfoInfo;

