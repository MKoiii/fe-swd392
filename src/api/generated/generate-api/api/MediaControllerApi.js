/**
 * SWD_392 Auction API
 * API documentation of SWD_392 Auction v1.0.0
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseResponsePreSignUrl from '../model/BaseResponsePreSignUrl';
import BaseResponseUploadResult from '../model/BaseResponseUploadResult';
import ErrorResponse from '../model/ErrorResponse';

/**
* MediaController service.
* @module api/MediaControllerApi
* @version 1.0.0
*/
export default class MediaControllerApi {

    /**
    * Constructs a new MediaControllerApi. 
    * @alias module:api/MediaControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mediaControllerGetPreSignDownloadPublic operation.
     * @callback module:api/MediaControllerApi~mediaControllerGetPreSignDownloadPublicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponsePreSignUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pre-sign url as string
     * @param {String} fileType 
     * @param {String} objectName 
     * @param {module:api/MediaControllerApi~mediaControllerGetPreSignDownloadPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponsePreSignUrl}
     */
    mediaControllerGetPreSignDownloadPublic(fileType, objectName, callback) {
      let postBody = null;
      // verify the required parameter 'fileType' is set
      if (fileType === undefined || fileType === null) {
        throw new Error("Missing the required parameter 'fileType' when calling mediaControllerGetPreSignDownloadPublic");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling mediaControllerGetPreSignDownloadPublic");
      }

      let pathParams = {
        'fileType': fileType,
        'objectName': objectName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BaseResponsePreSignUrl;
      return this.apiClient.callApi(
        '/api/v1/media/public/preview/pre-sign-url/{fileType}/{objectName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaControllerPreviewPreSignPublic operation.
     * @callback module:api/MediaControllerApi~mediaControllerPreviewPreSignPublicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preview file public
     * Preview file public, redirect to AWS S3 with pre-signed URL
     * @param {String} fileType 
     * @param {String} objectName 
     * @param {module:api/MediaControllerApi~mediaControllerPreviewPreSignPublicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaControllerPreviewPreSignPublic(fileType, objectName, callback) {
      let postBody = null;
      // verify the required parameter 'fileType' is set
      if (fileType === undefined || fileType === null) {
        throw new Error("Missing the required parameter 'fileType' when calling mediaControllerPreviewPreSignPublic");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling mediaControllerPreviewPreSignPublic");
      }

      let pathParams = {
        'fileType': fileType,
        'objectName': objectName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/media/public/preview/pre-sign/{fileType}/{objectName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaControllerPreviewPubic operation.
     * @callback module:api/MediaControllerApi~mediaControllerPreviewPubicCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preview file public
     * Preview file public, redirect to AWS S3 with pre-signed URL
     * @param {String} fileType 
     * @param {String} objectName 
     * @param {module:api/MediaControllerApi~mediaControllerPreviewPubicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    mediaControllerPreviewPubic(fileType, objectName, callback) {
      let postBody = null;
      // verify the required parameter 'fileType' is set
      if (fileType === undefined || fileType === null) {
        throw new Error("Missing the required parameter 'fileType' when calling mediaControllerPreviewPubic");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling mediaControllerPreviewPubic");
      }

      let pathParams = {
        'fileType': fileType,
        'objectName': objectName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/media/public/preview/{fileType}/{objectName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaControllerUploadPublic operation.
     * @callback module:api/MediaControllerApi~mediaControllerUploadPublicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseUploadResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file public
     * Upload file public with file type
     * @param {module:model/String} fileType 
     * @param {File} file 
     * @param {module:api/MediaControllerApi~mediaControllerUploadPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseUploadResult}
     */
    mediaControllerUploadPublic(fileType, file, callback) {
      let postBody = null;
      // verify the required parameter 'fileType' is set
      if (fileType === undefined || fileType === null) {
        throw new Error("Missing the required parameter 'fileType' when calling mediaControllerUploadPublic");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling mediaControllerUploadPublic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'fileType': fileType,
        'file': file
      };

      let authNames = ['Authorization'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*', 'application/json'];
      let returnType = BaseResponseUploadResult;
      return this.apiClient.callApi(
        '/api/v1/media/public/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
