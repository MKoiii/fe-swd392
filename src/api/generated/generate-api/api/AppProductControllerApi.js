/**
 * SWD_392 Auction API
 * API documentation of SWD_392 Auction v1.0.0
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasePagingResponseProductInfo from '../model/BasePagingResponseProductInfo';
import BasePagingResponseProductInfoInfo from '../model/BasePagingResponseProductInfoInfo';
import BaseResponseProductDetails from '../model/BaseResponseProductDetails';
import BaseResponseProductDetailsDetails from '../model/BaseResponseProductDetailsDetails';
import CreateProductRequestCreate from '../model/CreateProductRequestCreate';
import ErrorResponse from '../model/ErrorResponse';
import SuccessResponse from '../model/SuccessResponse';
import UpdateProductRequestUpdate from '../model/UpdateProductRequestUpdate';

/**
* AppProductController service.
* @module api/AppProductControllerApi
* @version 1.0.0
*/
export default class AppProductControllerApi {

    /**
    * Constructs a new AppProductControllerApi. 
    * @alias module:api/AppProductControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appProductControllerCreateModel operation.
     * @callback module:api/AppProductControllerApi~appProductControllerCreateModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseProductDetailsDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateProductRequestCreate} createProductRequestCreate 
     * @param {module:api/AppProductControllerApi~appProductControllerCreateModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseProductDetailsDetails}
     */
    appProductControllerCreateModel(createProductRequestCreate, callback) {
      let postBody = createProductRequestCreate;
      // verify the required parameter 'createProductRequestCreate' is set
      if (createProductRequestCreate === undefined || createProductRequestCreate === null) {
        throw new Error("Missing the required parameter 'createProductRequestCreate' when calling appProductControllerCreateModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = BaseResponseProductDetailsDetails;
      return this.apiClient.callApi(
        '/api/v1/app/product/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appProductControllerDeleteModelById operation.
     * @callback module:api/AppProductControllerApi~appProductControllerDeleteModelByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/AppProductControllerApi~appProductControllerDeleteModelByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    appProductControllerDeleteModelById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appProductControllerDeleteModelById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/api/v1/app/product/{id}/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appProductControllerGetDetailsById operation.
     * @callback module:api/AppProductControllerApi~appProductControllerGetDetailsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseProductDetailsDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/AppProductControllerApi~appProductControllerGetDetailsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseProductDetailsDetails}
     */
    appProductControllerGetDetailsById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appProductControllerGetDetailsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BaseResponseProductDetailsDetails;
      return this.apiClient.callApi(
        '/api/v1/app/product/{id}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appProductControllerGetInfoPageWithFilter operation.
     * @callback module:api/AppProductControllerApi~appProductControllerGetInfoPageWithFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasePagingResponseProductInfoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {Number} [categoryId] 
     * @param {Number} [page = 0)] Zero-based page index (0..N)
     * @param {Number} [size = 20)] The size of the page to be returned
     * @param {Array.<String>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {module:api/AppProductControllerApi~appProductControllerGetInfoPageWithFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasePagingResponseProductInfoInfo}
     */
    appProductControllerGetInfoPageWithFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'categoryId': opts['categoryId'],
        'page': opts['page'],
        'size': opts['size'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BasePagingResponseProductInfoInfo;
      return this.apiClient.callApi(
        '/api/v1/app/product/info/page/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appProductControllerGetProductDetailsPublic operation.
     * @callback module:api/AppProductControllerApi~appProductControllerGetProductDetailsPublicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseProductDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/AppProductControllerApi~appProductControllerGetProductDetailsPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseProductDetails}
     */
    appProductControllerGetProductDetailsPublic(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appProductControllerGetProductDetailsPublic");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BaseResponseProductDetails;
      return this.apiClient.callApi(
        '/api/v1/app/product/public/{id}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appProductControllerGetProductPagePublic operation.
     * @callback module:api/AppProductControllerApi~appProductControllerGetProductPagePublicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasePagingResponseProductInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {Number} [categoryId] 
     * @param {Number} [page = 0)] Zero-based page index (0..N)
     * @param {Number} [size = 20)] The size of the page to be returned
     * @param {Array.<String>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {module:api/AppProductControllerApi~appProductControllerGetProductPagePublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasePagingResponseProductInfo}
     */
    appProductControllerGetProductPagePublic(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'categoryId': opts['categoryId'],
        'page': opts['page'],
        'size': opts['size'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BasePagingResponseProductInfo;
      return this.apiClient.callApi(
        '/api/v1/app/product/public/info/page/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appProductControllerUpdateModel operation.
     * @callback module:api/AppProductControllerApi~appProductControllerUpdateModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseProductDetailsDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateProductRequestUpdate} updateProductRequestUpdate 
     * @param {module:api/AppProductControllerApi~appProductControllerUpdateModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseProductDetailsDetails}
     */
    appProductControllerUpdateModel(updateProductRequestUpdate, callback) {
      let postBody = updateProductRequestUpdate;
      // verify the required parameter 'updateProductRequestUpdate' is set
      if (updateProductRequestUpdate === undefined || updateProductRequestUpdate === null) {
        throw new Error("Missing the required parameter 'updateProductRequestUpdate' when calling appProductControllerUpdateModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = BaseResponseProductDetailsDetails;
      return this.apiClient.callApi(
        '/api/v1/app/product/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
